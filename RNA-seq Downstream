# DESeq2 사용을 위해 RSTUDIO 설치하기
# Rtools 다운로드 하기
https://cran.r-project.org/bin/windows/Rtools/
R 버전에 맞게 다운로드

# R에서 진행

# Bioconductor의 core packages 설치

# DESeq2 과정
if(!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("DESeq2")  #DESeq2 패키지 설치

install.packages("ggplot2") # volcano 등 기본 그래프
install.packages("dplyr")  # 전처리 편의
install.packages("tibble") # 전처리 편의
install.packages("data.table") # 대용량 빠른 처리
install.packages(c("ggrepel","patchwork","cowplot")) # volcano 라벨 겹치 방지와 그림 합치기/레이아웃용
install.packages("msigdbr")
BiocManager::install("pathview") # KEGG pathway 그림에 발현값 오버레이
BiocManager::install("apeglm") # log2FoldChange를 안정화 하는데 사용. volcano 품질이 올라감.
a
BiocManager::install("clusterProfiler") # GO, KEGG, GSEA 분석을 위한 도구
a
BiocManager::install("org.Hs.eg.db") # 인간 유전자 annotation DB
a
BiocManager::install("AnnotationDbi") # gene ID 변환용 도구
a
BiocManager::install("DOSE") # enrichment 분석용 내부 엔진 도구
a
BiocManager::install("fgsea") # GSEA 전용 패키지
a
BiocManager::install("enrichplot") # GO/KEGG/GSEA 결과 시각화용
a
BiocManager::install("pathview") # KEGG pathway 그림에 발현값 오버레이
a
BiocManager::install("ComplexHeatmap") # Heatmap 시각화
a
BiocManager::install("tximport") # rsem을 통해 생성된 데이터를 DESeq2 분석을 위한 table 데이터로 바꾸는 tool 한마디로 genes.results 불러오기
a
BiocManager::install("readr") # 나중에 csv,tsv 생성을 위한 tool
a
BiocManager::install("biomaRt") # Gene id symbol 설정.

library(DESeq2)
library(dplyr)
library(tibble)
library(ggplot2)
library(tximport)
library(readr)
library(apeglm)
library(ggrepel)
library(ComplexHeatmap)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(fgsea)
library(pathview)
library(AnnotationDbi)
library(biomaRt)
library(circlize)
library(msigdbr)

samples <- c("SRR1039508","SRR1039509","SRR1039512","SRR1039513","SRR1039516","SRR1039517","SRR1039520","SRR1039521")

rsem_dir <- "C:/Users/rkawk/rsem"
files <- list.files(rsem_dir, pattern = "\\.genes\\.results$", full.names = TRUE)
stopifnot(length(files) > 1)

samples <- sub("\\.genes\\.results$", "", basename(files))
names(files) <- samples

condition <- factor(rep(c("Control","Treat"), times = length(samples)/2),
                    levels = c("Control","Treat"))

coldata <- data.frame(sample = samples, condition = condition, row.names = samples)

condition
data.frame(samples, condition) # 확인용

txi <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE,
                countsFromAbundance = "no")

txi$length[txi$length == 0] <- 1

dds <- DESeqDataSetFromTximport(txi = txi, colData = coldata, design = ~ condition)

dds <- DESeq(dds)

res <- results(dds, contrast = c("condition", "Treat", "Control"))
res <- lfcShrink(dds, coef = "condition_Treat_vs_Control", type = "apeglm")

res_df <- as.data.frame(res) %>%
  tibble::rownames_to_column("gene_id") %>%
  mutate(
    log2fc = log2FoldChange,
    pval = padj
  ) %>%
  filter(!is.na(pval))

# 임계값 설정 (샘플에 따라 변경하기)
lfc_cut <- 0.6
fdr_cut <- 0.05

res_df <- res_df %>%
  mutate(
    diffexpressed = case_when(
      pval < fdr_cut & log2fc >= lfc_cut ~ "Up",
      pval < fdr_cut & log2fc <= -lfc_cut ~ "Down",
      TRUE ~ "NS"
    )
  )



# 라벨링용 상위 유전자 선택(topN 값은 유동적으로 변경) 변화량 기준이면 arrange(desc(abs(log2fc)))
topN <- 10
label_top <- res_df %>%
  filter(diffexpressed != "NS") %>%
  arrange(pval) %>%
  head(topN) %>%
  pull(gene_id)

res_df <- res_df %>%
  mutate(
    delabel = ifelse(gene_id %in% label_top, gene_id, NA_character_)
  )

# volcano plot 그리기
volcanoplot <- ggplot(res_df, aes(x = log2fc, y = -log10(pval),
                                  color = diffexpressed, label = delabel)) +
  geom_vline(xintercept = c(-lfc_cut, lfc_cut), color = "gray", linetype = "dashed") +
  geom_hline(yintercept = -log10(fdr_cut), color = "gray", linetype = "dashed") +
  geom_point(size = 2) +
  scale_color_manual(values = c("Down" = "#79A9E1", "NS" = "grey70", "Up" = "#8B2B2B"),
                     labels = c("Down" = "Downregulated",
                                "NS" = "Not significant",
                                "Up" = "Upregulated")) +
  labs(color = "Group",
       x = expression("log"[2]*"FC (shrunk)"),
       y = expression("-log"[10]*"FDR (padj)"),
       title = "Volcano plot: Treat(test) vs Control(original)") +
  coord_cartesian(ylim = c(0, NA), xlim = c(-10, 10)) +
  scale_x_continuous(breaks = seq(-10, 10, 2)) +
  theme_bw() +
  geom_text_repel(max.overlaps = Inf, na.rm = TRUE)

print(volcanoplot)


# 라벨링 이름 유전자로 바꾼 버전

samples <- c("SRR1039508","SRR1039509","SRR1039512","SRR1039513","SRR1039516","SRR1039517","SRR1039520","SRR1039521")

rsem_dir <- "C:/Users/rkawk/rsem"
files <- list.files(rsem_dir, pattern = "\\.genes\\.results$", full.names = TRUE)
stopifnot(length(files) > 1)

samples <- sub("\\.genes\\.results$", "", basename(files))
names(files) <- samples

condition <- factor(rep(c("Control","Treat"), times = length(samples)/2),
                    levels = c("Control","Treat"))

coldata <- data.frame(sample = samples, condition = condition, row.names = samples)

condition
data.frame(samples, condition) # 확인용

txi <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE,
                countsFromAbundance = "no")

txi$length[txi$length == 0] <- 1

dds <- DESeqDataSetFromTximport(txi = txi, colData = coldata, design = ~ condition)

dds <- DESeq(dds)

res <- results(dds, contrast = c("condition", "Treat", "Control"))
res <- lfcShrink(dds, coef = "condition_Treat_vs_Control", type = "apeglm")

res_df <- as.data.frame(res) %>%
  tibble::rownames_to_column("gene_id") %>%
  mutate(
    log2fc = log2FoldChange,
    pval = padj
  ) %>%
  filter(!is.na(pval))

# 임계값 설정 (샘플에 따라 변경하기)
lfc_cut <- 0.6
fdr_cut <- 0.05

res_df <- res_df %>%
  mutate(
    diffexpressed = case_when(
      pval < fdr_cut & log2fc >= lfc_cut ~ "Up",
      pval < fdr_cut & log2fc <= -lfc_cut ~ "Down",
      TRUE ~ "NS"
    )
  )

res_df <- res_df %>%
  mutate(ENSEMBL = sub("\\..*$", "", gene_id))

map_tbi <- AnnotationDbi::select(
  org.Hs.eg.db,
  keys = unique(res_df$ENSEMBL),
  keytype = "ENSEMBL",
  columns = c("SYMBOL", "ENTREZID")
) %>% distinct(ENSEMBL, .keep_all = TRUE)

res_df <- res_df %>%
  left_join(map_tbi, by = "ENSEMBL") %>%
  mutate(
    symbol = ifelse(!is.na(SYMBOL), SYMBOL, gene_id),
    entrez = ENTREZID
  )

# 라벨링용 상위 유전자 선택(topN 값은 유동적으로 변경) 변화량 기준이면 arrange(desc(abs(log2fc)))
topN <- 15
label_top <- res_df %>%
  filter(diffexpressed != "NS") %>%
  arrange(pval) %>%
  head(topN) %>%
  pull(symbol)

res_df <- res_df %>%
  mutate(
    delabel = ifelse(symbol %in% label_top, symbol, NA_character_)
  )

# volcano plot 그리기, coord_cartesian 값 조절하면서 나타내기기
volcanoplot <- ggplot(res_df, aes(x = log2fc, y = -log10(pval),
                                  color = diffexpressed, label = delabel)) +
  geom_vline(xintercept = c(-lfc_cut, lfc_cut), color = "gray", linetype = "dashed") +
  geom_hline(yintercept = -log10(fdr_cut), color = "gray", linetype = "dashed") +
  geom_point(size = 2, alpha = 0.9, stroke = 0) +
  scale_color_manual(values = c("Down" = "#79A9E1", "NS" = "grey70", "Up" = "#8B2B2B"),
                     labels = c("Down" = "Downregulated",
                                "NS" = "Not significant",
                                "Up" = "Upregulated")) +
  labs(color = "Group",
       x = expression("log"[2]*"FC (shrunk)"),
       y = expression("-log"[10]*"FDR (padj)"),
       title = "Volcano plot: Treat(test) vs Control(original)") +
  coord_cartesian(ylim = c(0, NA), xlim = c(-10, 10)) +
  scale_x_continuous(breaks = seq(-10, 10, by = 2)) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "right",
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.title = element_text(face = "bold", hjust = 0.5),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.6)
  ) +
  geom_text_repel(
    aes(label = delabel),
    max.overlaps = Inf, na.rm = TRUE, box.padding = 0.4, point.padding = 0.2,
    size = 3, segment.color = "grey60", min.segment.length = 0
    )

print(volcanoplot)

# Heatmap 그리기 topN 선정 버전 topn 수는 유동적으로 결정
vsd <- vst(dds, blind = FALSE)

topn <- 15
var_genes <- head(order(rowVars(assay(vsd)), decreasing = TRUE),
                  topn)
mat <- assay(vsd)[var_genes,]

ens_ids <- sub("\\..*$", "", rownames(mat))

map_tbi <- AnnotationDbi::select(
  org.Hs.eg.db,
  keys = ens_ids,
  keytype = "ENSEMBL",
  columns = c("SYMBOL")
)

map_tbi <- distinct(map_tbi, ENSEMBL, .keep_all = TRUE)

rownames(mat) <- map_tbi$SYMBOL[match(ens_ids, map_tbi$ENSEMBL)]

mat_z <- t(scale(t(mat)))

ha <- HeatmapAnnotation(
  condition = coldata$condition,
  col = list(Condition = c(Control = "#94a3b8", Treat = "#f59e0b"))
)

ht <- Heatmap(mat_z,
              name = "Z-score",
              top_annotation = ha,
              show_row_names = TRUE,
              show_column_names = TRUE,
              cluster_rows = TRUE, cluster_columns = TRUE,
              row_names_gp = gpar(fontsize = 10)
              )
draw(ht)

# 이름 없이 추세만 보는 용도 heatmap
vsd <- vst(dds, blind = FALSE)

topn <- 500
var_genes <- head(order(rowVars(assay(vsd)), decreasing = TRUE),
                  topn)
mat <- assay(vsd)[var_genes,]
mat_z <- t(scale(t(mat)))

ha <- HeatmapAnnotation(
  condition = coldata$condition,
  col = list(Condition = c(Control = "#94a3b8", Treat = "#f59e0b"))
)

ht <- Heatmap(mat_z,
              name = "Z-score",
              top_annotation = ha,
              show_row_names = FALSE,
              show_column_names = TRUE,
              cluster_rows = TRUE, cluster_columns = TRUE,)

draw(ht)
